# -*- coding: utf-8 -*-
"""English_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B8z0sFzClsFLWoIKIL0bpHe4iOIgjvkX

## **Car/Motorcycle/Bicycle Classificator**

Project by: Jo√£o Pedro Moura -jpspm, Maria Eduarda Barros Mota -mebm, Marcelo Menezes Valois -mmv4
"""

!pip install -Uqq fastbook
import fastbook
fastbook.setup_book()

from fastbook import *
from fastai.vision.widgets import *

"""In this Project, we'll do a Car/Motorcycle/Bicycle classificator. At the final of the project, we will be able to insert an image, and our classificator will define if it is a car, Motorcycle and Bicycle.

At first, we download the images with Bing Image Search, using the key (that is avaiable on our Azure account).

## Downloading the Image
"""

key = os.environ.get('AZURE_SEARCH_KEY', 'Azure-Key')

vehicle_types = 'bicycle','motorcycle','car'
path = gdrive/'vehicle'

if not path.exists():
    path.mkdir()
    for o in vehicle_types:
        dest = (path/o)
        dest.mkdir(exist_ok=True)
        results = search_images_bing(key, f'{o}')
        download_images(dest, urls=results.attrgot('contentUrl'))

fns = get_image_files(path)

"""Here, we have one of the images that we downloaded:"""

im = Image.open(fns[2])
im.to_thumb(128,128)

failed = verify_images(fns)
failed

failed.map(Path.unlink);

vehicle = DataBlock(
    blocks=(ImageBlock, CategoryBlock), 
    get_items=get_image_files, 
    splitter=RandomSplitter(valid_pct=0.2, seed=42),
    get_y=parent_label,
    item_tfms=Resize(128))

dls = vehicle.dataloaders(path)

"""## Adjusting the Images

Now, by randomly selecting parts of the image, and cropping to just these parts, we can have a better performance in our Model (our model can learn to focus on, and recognize, different features in our images).
Below, there are some of the selected parts of one of our dowloaded images.
"""

vehicle = vehicle.new(item_tfms=RandomResizedCrop(128, min_scale=0.3))
dls = vehicle.dataloaders(path)
dls.train.show_batch(max_n=4, nrows=1, unique=True)

"""After that, using Data Augmentation, we create random variations of our input data, but  not actually changing the meaning of the data. 
Below, there are some variations:

"""

vehicle = vehicle.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2))
dls = vehicle.dataloaders(path)
dls.train.show_batch(max_n=8, nrows=2, unique=True)

"""## Training the Model"""

vehicle = vehicle.new(
    item_tfms=RandomResizedCrop(224, min_scale=0.5),
    batch_tfms=aug_transforms())
dls = vehicle.dataloaders(path)

"""Using a strategy by researcher leslie smith"""

learn = cnn_learner(dls, resnet34, metrics=error_rate)
learn.fine_tune(1, base_lr=0.1)

learn = cnn_learner(dls, resnet34, metrics=error_rate)
lr_min,lr_steep = learn.lr_find()

print(f"Minimum/10: {lr_min:.2e}, steepest point: {lr_steep:.2e}")

"""We will use 3e-3, as it is a central value between the minimum and the steepest point"""

learn = cnn_learner(dls, resnet34, metrics=error_rate)
learn.fit_one_cycle(3, 3e-3)

learn.fit_one_cycle(6, lr_max=1e-5)

"""Creating a Confusion Matrix, we can easily see the mistakes the model is making in classification. 
This is useful to see where exactly our errors are occurring.

"""

interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix()

interp.plot_top_losses(5, nrows=1)

"""Here, we clean our model by deleting or allocating the images below on the correct labels"""

cleaner = ImageClassifierCleaner(learn)
cleaner

for idx in cleaner.delete(): cleaner.fns[idx].unlink()
for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat)

"""### Using the Model for Inference"""

learn.export(gdrive/'export.pkl')

path = gdrive
path.ls(file_exts='.pkl')

learn_inf = load_learner(path/'export.pkl')

learn_inf.dls.vocab

"""### Organizing our model and Create a widget

In this step, we are going to create an upload and classification button to have a better interface.
"""

btn_upload = widgets.FileUpload()
btn_upload

img = PILImage.create(btn_upload.data[-1])

out_pl = widgets.Output()
out_pl.clear_output()
with out_pl: display(img.to_thumb(128,128))
out_pl

pred,pred_idx,probs = learn_inf.predict(img)

lbl_pred = widgets.Label()
lbl_pred.value = f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}'
lbl_pred

btn_run = widgets.Button(description='Classify')

def on_click_classify(change):
    img = PILImage.create(btn_upload.data[-1])
    out_pl.clear_output()
    with out_pl: display(img.to_thumb(128,128))
    pred,pred_idx,probs = learn_inf.predict(img)
    lbl_pred.value = f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}'

btn_run.on_click(on_click_classify)

btn_upload = widgets.FileUpload()

VBox([widgets.Label('Select your vehicle!'), 
      btn_upload, btn_run, out_pl, lbl_pred])